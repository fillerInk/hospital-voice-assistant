<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Home</title>
    <link rel="stylesheet" href="style.css" />
  </head>
  <body>
    <div style="margin: 30px; display: flex">
      
      <div style="float: left; width: 45%; height: auto;">
        <h1>Enter your details</h1>

        <form action="/post" method="POST">
          
          <label>Name</label>
          <input type="text" name="name" id="name" placeholder="Name" style="width: 50%; margin: 5px 0;">
          <label>Address</label>
          <input type="text" name="adress" id="address" placeholder="Address" style="width: 50%; margin: 5px 0;">
          <label>Phone Number</label>
          <input type="text" name="phone" id="phone" placeholder="Phone Number" style="width: 50%; margin: 5px 0;">
          <label>Hospital Block</label>
          <input type="text" name="block" id="block" placeholder="Block" style="width: 50%; margin: 5px 0;">
          <label>Room No.</label>
          <input type="text" name="room" id="room" placeholder="Room No. (give 0 if not applicable)" style="width: 50%; margin: 5px 0;">
          <label>Type of visitor</label>
          <select name="type" id="type" style="width: 55%; margin: 5px 0;">
            <option value="bystander">Bystander</option>
            <option value="casuality">Casuality</option>
            <option value="covidtest">Covid Test</option>
            <option value="appointment">Doctor's Appointment</option>
            <option value="medicalrep">Medical Rep</option>
            <option value="staff">Staff</option>
            <option value="others">Others</option>
          </select>          
          <label>Checkin Time</label>
          <input type="text" name="time" id="time" placeholder="Check in time" style="width: 50%; margin: 5px 0;">

          <br><br>
          <button class='outline' style="margin-left:auto; margin-right:auto; width:20%;" type="submit">Submit</button>
        </form>

      </div>

      <div style="float: right; width: 45%; height: auto; margin: 10px; text-align:center">
        <br />
        <div id="webcam-container"></div>
       
        <br>
        <p id="action" style="font-size: x-large;"></p>
        <div id="progressbar" class='cp-spinner  cp-round' style="display: none;"></div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>
    
    <script type="text/javascript">


      const name = document.getElementById('name')
      const address = document.getElementById('address')
      const phone = document.getElementById('phone')

      const time = document.getElementById('time')
      var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

      function timeNow(i) {
        var d = new Date(),
          h = (d.getHours()<10?'0':'') + d.getHours(),
          m = (d.getMinutes()<10?'0':'') + d.getMinutes();
          date = d.getDate();
          month = months[d.getMonth()];
          year = d.getFullYear();
        i.value = h + ':' + m + ", " + date + " " +  month + " " + year;
      }

      timeNow(time)
      /*
      const URL = "./models/";
      let model, webcam, labelContainer, maxPredictions;
      const progress = document.getElementById('progressbar')
      
      
      function runSpeechRecognition() {
        // get output div reference
        var output = document.getElementById("output");
        // get action element reference
        var action = document.getElementById("action");
            // new speech recognition object
            var SpeechRecognition = SpeechRecognition || webkitSpeechRecognition;
            var recognition = new SpeechRecognition();
        
            // This runs when the speech recognition service starts
            recognition.onstart = function() {
                action.innerHTML = "listening, please speak...";
            };
            
            recognition.onspeechend = function() {
                action.innerHTML = "stopped listening, hope you are done...";
                recognition.stop();
            }
          
            // This runs when the speech recognition service returns result
            recognition.onresult = function(event) {
                var transcript = event.results[0][0].transcript;
                var confidence = event.results[0][0].confidence;
                console.log(transcript)
                action.innerHTML = `You said "${transcript}"`;
                name.value = transcript
            };
          
             // start recognition
             recognition.start();
      }
      
      // Load the image model and setup the webcam
      async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";

        // load the model and metadata
        // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
        // or files from your local hard drive
        // Note: the pose library adds "tmImage" object to your window (window.tmImage)
        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();

        // Convenience function to setup a webcam
        const flip = true; // whether to flip the webcam
        webcam = new tmImage.Webcam(500, 500, flip); // width, height, flip
        await webcam.setup(); // request access to the webcam
        await webcam.play();
        window.requestAnimationFrame(loop);

        // append elements to the DOM
        document.getElementById("webcam-container").appendChild(webcam.canvas);
        //labelContainer = document.getElementById("label-container");
        //for (let i = 0; i < maxPredictions; i++) {
          // and class labels
          //labelContainer.appendChild(document.createElement("div"));
        //}
      }
      var timeouts = []
      async function loop() {
        webcam.update(); // update the webcam frame
        const action = await predict();
        window.requestAnimationFrame(loop);
        if (action == 1) {
          //action if hand is there
          //resultDiv.style.display = "block";
          progress.style.display ='inline-block'
          //progress.style.width = "100%";
          timeouts.push(setTimeout(() => {
            if (action == 1) {
              console.log('Print stuff')
              runSpeechRecognition();
              for (var i=0; i<timeouts.length; i++) {
                clearTimeout(timeouts[i]);
              }
            }
          },3000));
        } else {
          //action is there is no hand
          //resultDiv.style.display = "none";
          progress.style.display ='none'
          for (var i=0; i<timeouts.length; i++) {
            clearTimeout(timeouts[i]);
          }
        }
      }

      // run the webcam image through the image model
      async function predict() {
        // predict can take in an image, video or canvas html element
        const prediction = await model.predict(webcam.canvas);
        for (let i = 0; i < maxPredictions; i++) {
          const classPrediction =
            prediction[i].className +
            ": " +
            prediction[i].probability.toFixed(2);
          //labelContainer.childNodes[i].innerHTML = classPrediction;
        }
        // console.log(prediction[1]['probability'])
        return prediction[1]["probability"];
      }
      */
    </script>

    
    <!-- <script defer>
      init();
    </script> -->
  </body>
</html>
