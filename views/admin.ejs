<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin</title>
    <script src="https://d3js.org/d3.v3.min.js"></script>
    <link rel="stylesheet" href="style.css" />
  </head>
  <body>
    <div style="margin: 30px;">
        <h1>Welcome, to admin panel</h1>
        <h3>Current visitors by type</h3>
    </div>

  
    <p id="holder" style="display: none;">
      <%= data %>
    </p>
    <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>

    <script>
      const holder = document.getElementById('holder')
      
      const datum = JSON.parse(holder.innerText);
      console.log(datum.value);
    
      let typeStat =  [
      {"label":"bystander", "value":0}, 
      {"label":"casuality", "value":0}, 
      {"label":"covidtest", "value":0},
      {"label":"appointment", "value":0},
      {"label":"medicalrep", "value":0},
      {"label":"staff", "value":0},
      {"label":"others", "value":0}];

      for(var i=0; i<datum.value.length; i++){
        const person = {};
        console.log(datum.value[i].type)
        for(let j=0;j<7;j++){
          if(typeStat[j].label == datum.value[i].type){
            typeStat[j].value ++;
          }
        }
      }

      function mycomparator(a,b) {
        return parseInt(a.value, 10) - parseInt(b.value, 10);
      }
      typeStat.sort(mycomparator);

      console.log(typeStat)
      
      var w = 600,                        //width
      h = 600,                            //height
      r = 300,                            //radius
      color = d3.scale.category20c();

      var vis = d3.select("body")
      .append("svg:svg")              //create the SVG element inside the <body>
      .data([typeStat])                   //associate our data with the document
          .attr("width", w)           //set the width and height of our visualization (these will be attributes of the <svg> tag
          .attr("height", h)
      .append("svg:g")                //make a group to hold our pie chart
          .attr("transform", "translate(" + r + "," + r + ")")    //move the center of the pie chart from 0, 0 to radius, radius

  var arc = d3.svg.arc()              //this will create <path> elements for us using arc data
      .outerRadius(r);

  var pie = d3.layout.pie()           //this will create arc data for us given a list of values
      .value(function(d) { return d.value; });    //we must tell it out to access the value of each element in our data array

  var arcs = vis.selectAll("g.slice")     //this selects all <g> elements with class slice (there aren't any yet)
      .data(pie)                          //associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties) 
      .enter()                            //this will create <g> elements for every "extra" data element that should be associated with a selection. The result is creating a <g> for every object in the data array
          .append("svg:g")                //create a group to hold each slice (we will have a <path> and a <text> element associated with each slice)
              .attr("class", "slice");    //allow us to style things in the slices (like text)

      arcs.append("svg:path")
              .attr("fill", function(d, i) { return color(i); } ) //set the color for each slice to be chosen from the color function defined above
              .attr("d", arc);                                    //this creates the actual SVG path using the associated data (pie) with the arc drawing function

      arcs.append("svg:text")                                     //add a label to each slice
              .attr("transform", function(d) {                    //set the label's origin to the center of the arc
              //we have to make sure to set these before calling arc.centroid
              d.innerRadius = 0;
              d.outerRadius = r;
              return "translate(" + arc.centroid(d) + ")";        //this gives us a pair of coordinates like [50, 50]
          })
          .attr("text-anchor", "middle")                          //center the text on it's origin
          .text(function(d, i) { return `${typeStat[i].label} (${typeStat[i].value})`; });      //get the label from our original data array


    </script>
  </body>
</html>
